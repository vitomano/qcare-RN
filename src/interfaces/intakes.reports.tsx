import { User } from "./interfaces.auth";

export interface CVSResponse {
    product: string;
    pallet: string;
    format: string;
    supplier: string;
    grower: string;
    origin: string;
    ['gln/ggn number']: string;
    ["variety(ies)"]: string;
    ["unit label"]: string;
    ["total boxes"]: string;
    ["total pallets"]: number;
    quality: string;
    transport: string;
    ["purchase order"]: string;
    ["delivery note / awb number"]: string;
    warehouse: string;
}


export interface BatchInfo {
    product: string;
    pallet_ref: string;
    format: string;
    supplier: string;
    grower: string;
    origin: string;
    gln_ggn: string;
    variety: string;
    unit_label: string;
    total_boxes: string;
    total_pallets: string;
    quality: string;
    transport: string;
    purchase_order: string;
    delivery_note: string;
    warehouse: string;

    samples?: string,
    kilos?: string,
    formatGr?: string
}

export interface MainInfo extends BatchInfo {
    samples?: string,
    kilos?: string,
    formatGr?: string,
}

export interface IntakesResponse {
    ok: boolean;
    msg: string;
    intakes?: Intake[];
    prereports?: Intake[];
    repacks?: Intake[];
}

export interface EntriesResponse {
    ok: boolean;
    msg: string;
    entries: Intake[];
}

export interface IntakeResponse {
    ok: boolean;
    msg: string;
    intakeReport: Intake;
}

export interface Intake {
    _id: string;
    data: BatchInfo;
    preReport: PreReport;
    user: string | UserPop;
    fruit: string
}

export interface UserPop {
    name: string,
    uid: string
}

export interface PreReport {
    done: boolean;
    score?: string;
    grade?: string;
    action?: string;
}


export interface PreReportResponse {
    ok: boolean;
    msg: string;
    intake: Intake;
}


export interface AllReports {
    msg:          string;
    singleReport: SingleReport;
}

export interface Pallet {
    pid:     string;
    details: Details;
    score:   string;
    images:  Image[];
}

export interface SingleReport {
    _id:       string;
    palletRef: string;
    comments:  string;
    fruit:     string;
    pallets:   Pallet[];
    formatGr:  number;
    score:     number;
    mainData:  MainInfo;
    date:      string;
}

// Generated by https://quicktype.io

export interface AllReportsResponse {
    ok:         boolean;
    page:       number;
    totalPages: number;
    reports:    SingleReport[];
}

// Generated by https://quicktype.io

export interface SingleReportResponse {
    msg:          string;
    singleReport: Report;
}

export interface Report {
    palletRef: string;
    comments:  string;
    fruit:     string;
    pallets:   Pallet[];
    formatGr:  number;
    score:     number;
    _id:       string;
    mainData:  MainInfo;
    user:      User;
    date:      string;
}


export interface Image {
    imgURL:     string;
    imgURL_low: string;
    key:        string;
    key_low:    string;
}

export interface Details {
    labels:     DetailObject[];
    appareance: DetailObject[];
    pallgrow:   DetailObject[];
}

export interface DetailObject{
    check:   boolean;
    tipe:  "checkbox" | "text" | "range" | "number" | "arrays";
    label: string;
    name:  string;
    valor:  string | boolean | number | string[] | number[];
    minVal?: number;
    maxVal?: number;
    arrays?: object[] | number;
}

export interface Label {
    check: boolean;
    tipe:  string;
    label: string;
    name:  string;
    valor: boolean | string;
}

export interface Appareance {
    check:   boolean;
    tipe:    string;
    label:   string;
    name?:   string;
    valor?:  string[] | boolean | number | string;
    minVal?: number;
    maxVal?: number;
    arrays?: object[] | number;
}

export interface Pallgrow {
    check: boolean;
    tipe:  string;
    label: string;
    name:  string;
    valor: string[] | string;
}

export interface IntakeSingleResponse {
    ok?: boolean;
    msg: string;
    intakeReport: Intake;
}


export interface PalletState {
    id:         string;
    samples:    number | string,
    score:      string;
    images:     Image[];
    labels:     DetailObject[];
    appareance: DetailObject[];
    pallgrow:   DetailObject[];
}